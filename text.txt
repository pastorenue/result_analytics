# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin sqlcustom [app_label]'
# into your database.
from __future__ import unicode_literals

from django.db import models


class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey('AuthPermission')

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group_id', 'permission_id'),)


class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    content_type = models.ForeignKey('DjangoContentType')
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type_id', 'codename'),)


class AuthUser(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    password = models.CharField(max_length=128)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    last_login = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    user = models.ForeignKey(AuthUser)
    group = models.ForeignKey(AuthGroup)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user_id', 'group_id'),)


class AuthUserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    user = models.ForeignKey(AuthUser)
    permission = models.ForeignKey(AuthPermission)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user_id', 'permission_id'),)


class CoursesCourse(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=250, blank=True, null=True)
    department = models.ForeignKey('InstitutionsDepartment', blank=True, null=True)
    lecturer = models.ForeignKey('InstitutionsLecturer', blank=True, null=True)
    unit = models.PositiveIntegerField()
    date_created = models.DateTimeField(blank=True, null=True)
    date_modified = models.DateTimeField(blank=True, null=True)
    added_by = models.ForeignKey(AuthUser)
    course_code = models.CharField(max_length=7, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'courses_course'


class CoursesCourseregistration(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    level = models.PositiveIntegerField(blank=True, null=True)
    semester = models.PositiveIntegerField(blank=True, null=True)
    session = models.CharField(max_length=15, blank=True, null=True)
    date_created = models.DateField(blank=True, null=True)
    department = models.ForeignKey('InstitutionsDepartment', blank=True, null=True)
    student = models.ForeignKey('StudentsStudent', blank=True, null=True)
    carried_over = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'courses_courseregistration'


class CoursesCourseregistrationCourse(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    courseregistration = models.ForeignKey(CoursesCourseregistration)
    course = models.ForeignKey(CoursesCourse)

    class Meta:
        managed = False
        db_table = 'courses_courseregistration_course'
        unique_together = (('courseregistration_id', 'course_id'),)


class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', blank=True, null=True)
    user = models.ForeignKey(AuthUser)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class InstitutionsDepartment(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    code = models.CharField(max_length=3, blank=True, null=True)
    name = models.CharField(max_length=200, blank=True, null=True)
    faculty = models.ForeignKey('InstitutionsFaculty', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'institutions_department'


class InstitutionsFaculty(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    code = models.CharField(max_length=5, blank=True, null=True)
    name = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'institutions_faculty'


class InstitutionsInstitution(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=250, blank=True, null=True)
    location = models.CharField(max_length=150, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'institutions_institution'


class InstitutionsInstitutiondetail(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    logo = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=30, blank=True, null=True)
    full_address = models.TextField(blank=True, null=True)
    institution = models.ForeignKey(InstitutionsInstitution, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'institutions_institutiondetail'


class InstitutionsLecturer(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=250, blank=True, null=True)
    specialty = models.CharField(max_length=170, blank=True, null=True)
    department = models.ForeignKey(InstitutionsDepartment, blank=True, null=True)
    position = models.ForeignKey('InstitutionsPosition', blank=True, null=True)
    title = models.CharField(max_length=5, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'institutions_lecturer'


class InstitutionsPosition(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=100)
    description = models.TextField()
    reports_to = models.ForeignKey('self', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'institutions_position'


class NotificationContact(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    email = models.CharField(max_length=254)
    message = models.TextField()
    name = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'notification_contact'


class NotificationSubscription(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    email = models.CharField(max_length=254)

    class Meta:
        managed = False
        db_table = 'notification_subscription'


class ResultsCgpa(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    semester = models.PositiveIntegerField(blank=True, null=True)
    session = models.CharField(max_length=15)
    date_created = models.DateTimeField()
    student = models.ForeignKey('StudentsStudent')
    level = models.PositiveIntegerField(blank=True, null=True)
    cgpa = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float

    class Meta:
        managed = False
        db_table = 'results_cgpa'


class ResultsGrading(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    caption = models.CharField(max_length=15, blank=True, null=True)
    start = models.IntegerField(blank=True, null=True)
    end = models.PositiveIntegerField(blank=True, null=True)
    grade_points = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float

    class Meta:
        managed = False
        db_table = 'results_grading'


class ResultsResult(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    score = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    semester = models.PositiveIntegerField(blank=True, null=True)
    date_created = models.DateField(blank=True, null=True)
    course = models.ForeignKey(CoursesCourse, blank=True, null=True)
    student = models.ForeignKey('StudentsStudent', blank=True, null=True)
    date_modified = models.DateTimeField(blank=True, null=True)
    level = models.PositiveIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'results_result'


class StatesCountry(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    code = models.CharField(max_length=3)
    name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'states_country'


class StatesLga(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=30)
    state = models.ForeignKey('StatesState')

    class Meta:
        managed = False
        db_table = 'states_lga'


class StatesState(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    code = models.CharField(max_length=3)
    name = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'states_state'


class StudentsBank(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'students_bank'


class StudentsDocument(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField()
    created_at = models.DateTimeField()
    students = models.ForeignKey('StudentsStudent')
    attached_file = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'students_document'


class StudentsPhonecategory(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'students_phonecategory'


class StudentsProject(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=250, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    file = models.CharField(max_length=100)
    date_created = models.DateField()
    last_modified = models.DateField()
    tag = models.CharField(max_length=150, blank=True, null=True)
    student = models.ForeignKey('StudentsStudent', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'students_project'


class StudentsScholarship(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    title = models.CharField(max_length=250, blank=True, null=True)
    provider = models.CharField(max_length=250, blank=True, null=True)
    location = models.CharField(max_length=150, blank=True, null=True)
    website = models.CharField(max_length=200, blank=True, null=True)
    date_created = models.DateTimeField()
    date_modified = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'students_scholarship'


class StudentsScholarshipStudent(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    scholarship = models.ForeignKey(StudentsScholarship)
    student = models.ForeignKey('StudentsStudent')

    class Meta:
        managed = False
        db_table = 'students_scholarship_student'
        unique_together = (('scholarship_id', 'student_id'),)


class StudentsStudent(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    photo = models.CharField(max_length=100)
    first_name = models.CharField(max_length=50, blank=True, null=True)
    middle_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50, blank=True, null=True)
    user_status = models.CharField(max_length=1, blank=True, null=True)
    reg_number = models.CharField(max_length=30)
    bank_account_number = models.CharField(max_length=20, blank=True, null=True)
    marital_status = models.PositiveSmallIntegerField(blank=True, null=True)
    sex = models.CharField(max_length=1)
    level = models.PositiveIntegerField()
    program_type = models.PositiveIntegerField(blank=True, null=True)
    birth_date = models.DateField(blank=True, null=True)
    library_id_number = models.PositiveIntegerField(blank=True, null=True)
    school_id_number = models.PositiveIntegerField(blank=True, null=True)
    date_gained_admission = models.DateField()
    blood_group = models.CharField(max_length=2)
    genotype = models.CharField(max_length=2)
    national_id_number = models.CharField(max_length=50)
    year_of_graduation = models.PositiveIntegerField()
    religion = models.PositiveIntegerField(blank=True, null=True)
    permanent_address = models.TextField()
    date_created = models.DateTimeField()
    date_modified = models.DateTimeField()
    bank = models.ForeignKey(StudentsBank, blank=True, null=True)
    country = models.ForeignKey(StatesCountry, blank=True, null=True)
    department = models.ForeignKey(InstitutionsDepartment, blank=True, null=True)
    faculty = models.ForeignKey(InstitutionsFaculty, blank=True, null=True)
    lga = models.ForeignKey(StatesLga, blank=True, null=True)
    state_of_origin = models.ForeignKey(StatesState, blank=True, null=True)
    state_of_residence = models.ForeignKey(StatesState, blank=True, null=True)
    student_institution = models.ForeignKey(InstitutionsInstitution, blank=True, null=True)
    user = models.ForeignKey(AuthUser, unique=True)
    phone_number = models.CharField(max_length=15, blank=True, null=True)
    address = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'students_student'


class ThumbnailKvstore(models.Model):
    key = models.CharField(primary_key=True, max_length=200)
    value = models.TextField()

    class Meta:
        managed = False
        db_table = 'thumbnail_kvstore'
